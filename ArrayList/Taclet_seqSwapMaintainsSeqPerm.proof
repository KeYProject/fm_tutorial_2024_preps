\profile "Java Profile";

\settings // Proof-Settings-Config-File
{ 
    "Choice" : { 
        "JavaCard" : "JavaCard:off",
        "Strings" : "Strings:on",
        "assertions" : "assertions:safe",
        "bigint" : "bigint:on",
        "floatRules" : "floatRules:strictfpOnly",
        "initialisation" : "initialisation:disableStaticInitialisation",
        "intRules" : "intRules:arithmeticSemanticsIgnoringOF",
        "integerSimplificationRules" : "integerSimplificationRules:full",
        "javaLoopTreatment" : "javaLoopTreatment:efficient",
        "mergeGenerateIsWeakeningGoal" : "mergeGenerateIsWeakeningGoal:off",
        "methodExpansion" : "methodExpansion:modularOnly",
        "modelFields" : "modelFields:treatAsAxiom",
        "moreSeqRules" : "moreSeqRules:on",
        "permissions" : "permissions:off",
        "programRules" : "programRules:Java",
        "reach" : "reach:on",
        "runtimeExceptions" : "runtimeExceptions:ban",
        "sequences" : "sequences:on",
        "wdChecks" : "wdChecks:off",
        "wdOperator" : "wdOperator:L"
     },
    "Labels" : { 
        "UseOriginLabels" : true
     },
    "NewSMT" : { 
        
     },
    "SMTSettings" : { 
        "SelectedTaclets" : [ 
            
         ],
        "UseBuiltUniqueness" : false,
        "explicitTypeHierarchy" : false,
        "instantiateHierarchyAssumptions" : true,
        "integersMaximum" : 2147483645,
        "integersMinimum" : -2147483645,
        "invariantForall" : false,
        "maxGenericSorts" : 2,
        "useConstantsForBigOrSmallIntegers" : true,
        "useUninterpretedMultiplication" : true
     },
    "Strategy" : { 
        "ActiveStrategy" : "JavaCardDLStrategy",
        "MaximumNumberOfAutomaticApplications" : 10000,
        "Timeout" : -1,
        "options" : { 
            "AUTO_INDUCTION_OPTIONS_KEY" : "AUTO_INDUCTION_OFF",
            "BLOCK_OPTIONS_KEY" : "BLOCK_CONTRACT_INTERNAL",
            "CLASS_AXIOM_OPTIONS_KEY" : "CLASS_AXIOM_FREE",
            "DEP_OPTIONS_KEY" : "DEP_ON",
            "INF_FLOW_CHECK_PROPERTY" : "INF_FLOW_CHECK_FALSE",
            "LOOP_OPTIONS_KEY" : "LOOP_SCOPE_INV_TACLET",
            "METHOD_OPTIONS_KEY" : "METHOD_CONTRACT",
            "MPS_OPTIONS_KEY" : "MPS_MERGE",
            "NON_LIN_ARITH_OPTIONS_KEY" : "NON_LIN_ARITH_NONE",
            "OSS_OPTIONS_KEY" : "OSS_ON",
            "QUANTIFIERS_OPTIONS_KEY" : "QUANTIFIERS_NON_SPLITTING_WITH_PROGS",
            "QUERYAXIOM_OPTIONS_KEY" : "QUERYAXIOM_ON",
            "QUERY_NEW_OPTIONS_KEY" : "QUERY_OFF",
            "SPLITTING_OPTIONS_KEY" : "SPLITTING_DELAYED",
            "STOPMODE_OPTIONS_KEY" : "STOPMODE_DEFAULT",
            "SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY" : "SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER",
            "SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY" : "SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF",
            "USER_TACLETS_OPTIONS_KEY1" : "USER_TACLETS_OFF",
            "USER_TACLETS_OPTIONS_KEY2" : "USER_TACLETS_OFF",
            "USER_TACLETS_OPTIONS_KEY3" : "USER_TACLETS_OFF",
            "VBT_PHASE" : "VBT_SYM_EX"
         }
     }
 } 

\proofObligation 
// Proof-Obligation settings
{ 
    "class" : "de.uka.ilkd.key.taclettranslation.lemma.TacletProofObligationInput",
    "definitionFile" : "unknown",
    "name" : "seqSwapMaintainsSeqPerm",
    "tacletFile" : "project.key"
 }

\proof {
(keyLog "0" (keyUser "weigl" ) (keyVersion "51f368c9ee0da2d2e053933de19e202ef7f36af4"))

(autoModeTime "9755")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "f_x,f_s,f_y"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "inEqSimp_ltToLeq" (formula "4"))
(rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
(rule "polySimp_addComm1" (formula "4") (term "0"))
(rule "inEqSimp_ltToLeq" (formula "2"))
(rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
(rule "polySimp_addComm1" (formula "2") (term "0"))
(rule "inEqSimp_commuteLeq" (formula "3"))
(rule "inEqSimp_commuteLeq" (formula "1"))
(rule "inEqSimp_sepNegMonomial0" (formula "4"))
(rule "polySimp_mulLiterals" (formula "4") (term "0"))
(rule "polySimp_elimOne" (formula "4") (term "0"))
(rule "inEqSimp_sepNegMonomial0" (formula "2"))
(rule "polySimp_mulLiterals" (formula "2") (term "0"))
(rule "polySimp_elimOne" (formula "2") (term "0"))
(rule "lenNonNegative" (formula "4") (term "0"))
(rule "inEqSimp_commuteLeq" (formula "4"))
(rule "pullOut" (formula "6") (term "1") (inst "sk=seqSwap_0") (userinteraction))
(rule "seqPermDef" (formula "7") (inst "s=s") (inst "iv=iv") (userinteraction))
(rule "andRight" (formula "7"))
(branch "Case 1"
   (rule "eqSymm" (formula "7"))
   (rule "equalityToSeqGetAndSeqLenLeft" (formula "1") (inst "iv=iv"))
   (rule "andLeft" (formula "1"))
   (rule "lenOfSwap" (formula "1") (term "0"))
   (rule "eqSymm" (formula "1"))
   (rule "close" (formula "9") (ifseqformula "1"))
)
(branch "Case 2"
   (rule "exRight" (formula "7") (inst "t=seqSwap(seqDef{int i;}(Z(0(#)), seqLen(f_s), i),
        f_x,
        f_y)") (userinteraction))
   (rule "hide_right" (formula "8") (userinteraction))
   (rule "andRight" (formula "7"))
   (branch "Case 1"
      (rule "andRight" (formula "7"))
      (branch "Case 1"
         (rule "lenOfSwap" (formula "7") (term "0"))
         (rule "lenOfSeqDef" (formula "7") (term "0"))
         (rule "polySimp_elimSub" (formula "7") (term "1,0"))
         (rule "mul_literals" (formula "7") (term "1,1,0"))
         (rule "add_zero_right" (formula "7") (term "1,0"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "orRight" (formula "7"))
         (rule "eqSymm" (formula "8"))
         (rule "inEqSimp_ltRight" (formula "7"))
         (rule "add_zero_right" (formula "1") (term "0"))
         (rule "polySimp_mulComm0" (formula "1") (term "0"))
         (rule "inEqSimp_invertInEq1" (formula "1"))
         (rule "times_zero_2" (formula "1") (term "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "0"))
         (rule "polySimp_elimOne" (formula "1") (term "0"))
         (rule "inEqSimp_strengthen0" (formula "1") (ifseqformula "8"))
         (rule "add_zero_right" (formula "1") (term "1"))
         (rule "inEqSimp_contradEq3" (formula "8") (ifseqformula "1"))
         (rule "mul_literals" (formula "8") (term "1,0,0"))
         (rule "add_literals" (formula "8") (term "0,0"))
         (rule "qeq_literals" (formula "8") (term "0"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "false_right" (formula "8"))
         (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "6"))
         (rule "qeq_literals" (formula "1") (term "0"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "closeFalse" (formula "1"))
      )
      (branch "Case 2"
         (rule "seqNPermDefReplace" (formula "7") (inst "iv=iv") (inst "jv=jv") (userinteraction))
         (rule "allRight" (formula "7") (inst "sk=iv_0") (userinteraction))
         (rule "impRight" (formula "7") (userinteraction))
         (rule "instEx" (formula "7") (term "1,1") (ifseqformula "8") (userinteraction))
         (rule "andLeft" (formula "1"))
         (rule "lenOfSwap" (formula "9") (term "1,1,0"))
         (rule "lenOfSwap" (formula "10") (term "1,1,0,0"))
         (rule "lenOfSwap" (formula "2") (term "1"))
         (rule "lenOfSeqDef" (formula "9") (term "1,1,0"))
         (rule "polySimp_elimSub" (formula "9") (term "1,1,1,0"))
         (rule "times_zero_2" (formula "9") (term "1,1,1,1,0"))
         (rule "add_zero_right" (formula "9") (term "1,1,1,0"))
         (rule "lenOfSeqDef" (formula "10") (term "1,1,0,0"))
         (rule "polySimp_elimSub" (formula "10") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "10") (term "1,1,1,1,0,0"))
         (rule "add_zero_right" (formula "10") (term "1,1,1,0,0"))
         (rule "lenOfSeqDef" (formula "2") (term "1"))
         (rule "polySimp_elimSub" (formula "2") (term "1,1"))
         (rule "mul_literals" (formula "2") (term "1,1,1"))
         (rule "add_zero_right" (formula "2") (term "1,1"))
         (rule "inEqSimp_ltToLeq" (formula "9") (term "0,1,1,0"))
         (rule "add_zero_right" (formula "9") (term "0,0,1,1,0"))
         (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "10") (term "0,1,1,0,0"))
         (rule "add_zero_right" (formula "10") (term "0,0,1,1,0,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "2") (term "0,1"))
         (rule "add_zero_right" (formula "2") (term "0,0,1"))
         (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1"))
         (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0"))
         (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0"))
         (rule "polySimp_addComm1" (formula "9") (term "0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "2"))
         (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "2") (term "0"))
         (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0"))
         (rule "replace_known_left" (formula "9") (term "0,0") (ifseqformula "6"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "inEqSimp_commuteLeq" (formula "1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0"))
         (rule "mul_literals" (formula "10") (term "0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "2") (term "0,0,0,1,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "9") (term "0"))
         (rule "polySimp_mulLiterals" (formula "9") (term "0,0"))
         (rule "polySimp_elimOne" (formula "9") (term "0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "0,1,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "10") (term "0,0,1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "10") (term "0,0,1,1,1,0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "2"))
         (rule "polySimp_mulLiterals" (formula "2") (term "0"))
         (rule "polySimp_elimOne" (formula "2") (term "0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "9") (term "0,0,0"))
         (rule "polySimp_mulLiterals" (formula "9") (term "0,0,0,0"))
         (rule "polySimp_elimOne" (formula "9") (term "0,0,0,0"))
         (rule "getOfSwap" (formula "10") (term "0,1,0"))
         (rule "lenOfSeqDef" (formula "10") (term "1,1,0,0,0,1,0"))
         (rule "polySimp_elimSub" (formula "10") (term "1,1,1,0,0,0,1,0"))
         (rule "times_zero_2" (formula "10") (term "1,1,1,1,0,0,0,1,0"))
         (rule "add_zero_right" (formula "10") (term "1,1,1,0,0,0,1,0"))
         (rule "getOfSeqDef" (formula "10") (term "2,2,2,0,1,0"))
         (rule "castDel" (formula "10") (term "2,2,2,2,0,1,0"))
         (rule "castDel" (formula "10") (term "1,2,2,2,0,1,0"))
         (rule "add_zero_right" (formula "10") (term "1,2,2,2,0,1,0"))
         (rule "polySimp_elimSub" (formula "10") (term "1,1,0,2,2,2,0,1,0"))
         (rule "times_zero_2" (formula "10") (term "1,1,1,0,2,2,2,0,1,0"))
         (rule "add_zero_right" (formula "10") (term "1,1,0,2,2,2,0,1,0"))
         (rule "getOfSeqDef" (formula "10") (term "1,2,2,0,1,0"))
         (rule "castDel" (formula "10") (term "2,1,2,2,0,1,0"))
         (rule "castDel" (formula "10") (term "1,1,2,2,0,1,0"))
         (rule "add_zero_right" (formula "10") (term "1,1,2,2,0,1,0"))
         (rule "polySimp_elimSub" (formula "10") (term "1,1,0,1,2,2,0,1,0"))
         (rule "times_zero_2" (formula "10") (term "1,1,1,0,1,2,2,0,1,0"))
         (rule "add_zero_right" (formula "10") (term "1,1,0,1,2,2,0,1,0"))
         (rule "getOfSeqDef" (formula "10") (term "1,2,0,1,0"))
         (rule "castDel" (formula "10") (term "2,1,2,0,1,0"))
         (rule "castDel" (formula "10") (term "1,1,2,0,1,0"))
         (rule "add_zero_right" (formula "10") (term "1,1,2,0,1,0"))
         (rule "polySimp_elimSub" (formula "10") (term "1,1,0,1,2,0,1,0"))
         (rule "times_zero_2" (formula "10") (term "1,1,1,0,1,2,0,1,0"))
         (rule "add_zero_right" (formula "10") (term "1,1,0,1,2,0,1,0"))
         (rule "getOfSeqDef" (formula "10") (term "1,0,1,0"))
         (rule "castDel" (formula "10") (term "1,1,0,1,0"))
         (rule "castDel" (formula "10") (term "2,1,0,1,0"))
         (rule "add_zero_right" (formula "10") (term "1,1,0,1,0"))
         (rule "polySimp_elimSub" (formula "10") (term "1,1,0,1,0,1,0"))
         (rule "times_zero_2" (formula "10") (term "1,1,1,0,1,0,1,0"))
         (rule "add_zero_right" (formula "10") (term "1,1,0,1,0,1,0"))
         (rule "lenOfSeqDef" (formula "10") (term "1,1,0,0,0,0,1,0"))
         (rule "polySimp_elimSub" (formula "10") (term "1,1,1,0,0,0,0,1,0"))
         (rule "times_zero_2" (formula "10") (term "1,1,1,1,0,0,0,0,1,0"))
         (rule "add_zero_right" (formula "10") (term "1,1,1,0,0,0,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "10") (term "0,1,1,0,0,0,1,0"))
         (rule "add_zero_right" (formula "10") (term "0,0,1,1,0,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,1,0,0,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,2,2,2,0,1,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,2,2,2,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,1,2,2,0,1,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,1,2,2,0,1,0"))
         (rule "polySimp_addComm1" (formula "10") (term "0,1,0,1,2,2,0,1,0"))
         (rule "ifthenelse_negated" (formula "10") (term "0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0,1,0"))
         (rule "polySimp_addComm1" (formula "10") (term "0,1,0,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0,0,1,0"))
         (rule "polySimp_addComm1" (formula "10") (term "0,1,0,0,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,1,1,0,1,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,1,1,0,1,0"))
         (rule "polySimp_addComm1" (formula "10") (term "0,1,0,1,1,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,2,0,1,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,2,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,1,0,1,0,0,0,1,0"))
         (rule "add_zero_right" (formula "10") (term "0,0,0,1,0,1,0,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,1,0,1,0,0,0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,2,2,1,0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,1,2,1,0,1,0"))
         (rule "replace_known_left" (formula "10") (term "0,0,1,2,1,0,1,0") (ifseqformula "4"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,1,1,0,1,0"))
         (rule "replace_known_left" (formula "10") (term "0,0,1,1,0,1,0") (ifseqformula "6"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0,0,0,1,0"))
         (rule "replace_known_left" (formula "10") (term "0,0,0,0,0,1,0") (ifseqformula "4"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,2,0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0,0,1,0"))
         (rule "replace_known_left" (formula "10") (term "0,0,0,0,1,0") (ifseqformula "6"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "0,1,2,1,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "10") (term "0,0,1,2,1,0,1,0"))
         (rule "polySimp_elimOne" (formula "10") (term "0,0,1,2,1,0,1,0"))
         (rule "replace_known_left" (formula "10") (term "0,1,2,1,0,1,0") (ifseqformula "5"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,2,0,1,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,2,0,1,0"))
         (rule "polySimp_rightDist" (formula "10") (term "1,1,0,2,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,2,0,1,0"))
         (rule "mul_literals" (formula "10") (term "0,1,1,0,2,0,1,0"))
         (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,2,0,1,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "1,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "10") (term "0,1,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "10") (term "0,1,0,0,1,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "0,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "10") (term "0,0,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "10") (term "0,0,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,2,2,1,0,1,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,2,2,1,0,1,0"))
         (rule "polySimp_rightDist" (formula "10") (term "1,1,0,2,2,1,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,2,2,1,0,1,0"))
         (rule "mul_literals" (formula "10") (term "0,1,1,0,2,2,1,0,1,0"))
         (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,2,2,1,0,1,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "0,1,1,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "10") (term "0,0,1,1,0,1,0"))
         (rule "polySimp_elimOne" (formula "10") (term "0,0,1,1,0,1,0"))
         (rule "replace_known_left" (formula "10") (term "0,1,1,0,1,0") (ifseqformula "8"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "0,0,1,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "10") (term "0,0,0,1,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "10") (term "0,0,0,1,0,0,1,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "0,0,0,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "10") (term "0,0,0,0,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "10") (term "0,0,0,0,0,0,1,0"))
         (rule "getOfSwap" (formula "9") (term "0,1"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "getOfSeqDef" (formula "9") (term "2,2,0,1"))
         (rule "castDel" (formula "9") (term "2,2,2,0,1"))
         (rule "castDel" (formula "9") (term "1,2,2,0,1"))
         (rule "add_zero_right" (formula "9") (term "1,2,2,0,1"))
         (rule "polySimp_elimSub" (formula "9") (term "1,1,0,2,2,0,1"))
         (rule "times_zero_2" (formula "9") (term "1,1,1,0,2,2,0,1"))
         (rule "add_zero_right" (formula "9") (term "1,1,0,2,2,0,1"))
         (rule "getOfSeqDef" (formula "9") (term "1,2,0,1"))
         (rule "castDel" (formula "9") (term "2,1,2,0,1"))
         (rule "castDel" (formula "9") (term "1,1,2,0,1"))
         (rule "add_zero_right" (formula "9") (term "1,1,2,0,1"))
         (rule "polySimp_elimSub" (formula "9") (term "1,1,0,1,2,0,1"))
         (rule "mul_literals" (formula "9") (term "1,1,1,0,1,2,0,1"))
         (rule "add_zero_right" (formula "9") (term "1,1,0,1,2,0,1"))
         (rule "getOfSeqDef" (formula "9") (term "1,0,1"))
         (rule "castDel" (formula "9") (term "2,1,0,1"))
         (rule "castDel" (formula "9") (term "1,1,0,1"))
         (rule "add_zero_right" (formula "9") (term "1,1,0,1"))
         (rule "polySimp_elimSub" (formula "9") (term "1,1,0,1,0,1"))
         (rule "times_zero_2" (formula "9") (term "1,1,1,0,1,0,1"))
         (rule "add_zero_right" (formula "9") (term "1,1,0,1,0,1"))
         (rule "lenOfSeqDef" (formula "9") (term "1,1,0,0,0,0,1"))
         (rule "polySimp_elimSub" (formula "9") (term "1,1,1,0,0,0,0,1"))
         (rule "times_zero_2" (formula "9") (term "1,1,1,1,0,0,0,0,1"))
         (rule "add_zero_right" (formula "9") (term "1,1,1,0,0,0,0,1"))
         (rule "lenOfSeqDef" (formula "9") (term "1,1,0,0,0,1"))
         (rule "polySimp_elimSub" (formula "9") (term "1,1,1,0,0,0,1"))
         (rule "times_zero_2" (formula "9") (term "1,1,1,1,0,0,0,1"))
         (rule "add_zero_right" (formula "9") (term "1,1,1,0,0,0,1"))
         (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,2,2,0,1"))
         (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,2,2,0,1"))
         (rule "polySimp_addComm1" (formula "9") (term "0,1,0,2,2,0,1"))
         (rule "ifthenelse_negated" (formula "9") (term "0,1"))
         (rule "inEqSimp_ltToLeq" (formula "9") (term "0,1,1,0,0,1"))
         (rule "add_zero_right" (formula "9") (term "0,0,1,1,0,0,1"))
         (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,1,0,0,1"))
         (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0,0,1"))
         (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0,0,1"))
         (rule "polySimp_addComm1" (formula "9") (term "0,1,0,0,0,1"))
         (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,2,0,1"))
         (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,2,0,1"))
         (rule "polySimp_addComm1" (formula "9") (term "0,1,0,2,0,1"))
         (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,1,1,0,1"))
         (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,1,1,0,1"))
         (rule "polySimp_addComm1" (formula "9") (term "0,1,0,1,1,0,1"))
         (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0,1"))
         (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0,1"))
         (rule "polySimp_addComm1" (formula "9") (term "0,1,0,0,1"))
         (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,1,0,1,0,0,0,1"))
         (rule "add_zero_right" (formula "9") (term "0,0,0,1,0,1,0,0,0,1"))
         (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,1,0,1,0,0,0,1"))
         (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,1,1,0,1"))
         (rule "replace_known_left" (formula "9") (term "0,0,1,1,0,1") (ifseqformula "6"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,2,1,0,1"))
         (rule "replace_known_left" (formula "9") (term "0,0,2,1,0,1") (ifseqformula "4"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "inEqSimp_commuteLeq" (formula "9") (term "1,0,0,0,0,1"))
         (rule "replace_known_left" (formula "9") (term "1,0,0,0,0,1") (ifseqformula "6"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,0,1"))
         (rule "replace_known_left" (formula "9") (term "0,0,0,0,1") (ifseqformula "4"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,2,0,1"))
         (rule "replace_known_left" (formula "9") (term "0,0,2,0,1") (ifseqformula "6"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "inEqSimp_sepNegMonomial0" (formula "9") (term "0,2,1,0,1"))
         (rule "polySimp_mulLiterals" (formula "9") (term "0,0,2,1,0,1"))
         (rule "polySimp_elimOne" (formula "9") (term "0,0,2,1,0,1"))
         (rule "replace_known_left" (formula "9") (term "0,2,1,0,1") (ifseqformula "5"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "inEqSimp_sepNegMonomial0" (formula "9") (term "0,2,0,1"))
         (rule "polySimp_mulLiterals" (formula "9") (term "0,0,2,0,1"))
         (rule "polySimp_elimOne" (formula "9") (term "0,0,2,0,1"))
         (rule "replace_known_left" (formula "9") (term "0,2,0,1") (ifseqformula "8"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "inEqSimp_sepNegMonomial0" (formula "9") (term "0,0,0,1"))
         (rule "polySimp_mulLiterals" (formula "9") (term "0,0,0,0,1"))
         (rule "polySimp_elimOne" (formula "9") (term "0,0,0,0,1"))
         (rule "inEqSimp_sepNegMonomial0" (formula "9") (term "0,1,1,0,1"))
         (rule "polySimp_mulLiterals" (formula "9") (term "0,0,1,1,0,1"))
         (rule "polySimp_elimOne" (formula "9") (term "0,0,1,1,0,1"))
         (rule "replace_known_left" (formula "9") (term "0,1,1,0,1") (ifseqformula "8"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "inEqSimp_sepNegMonomial0" (formula "9") (term "0,0,1,0,1,0,0,1"))
         (rule "polySimp_mulLiterals" (formula "9") (term "0,0,0,1,0,1,0,0,1"))
         (rule "polySimp_elimOne" (formula "9") (term "0,0,0,1,0,1,0,0,1"))
         (rule "inEqSimp_sepNegMonomial0" (formula "9") (term "0,0,0,0,0,1"))
         (rule "polySimp_mulLiterals" (formula "9") (term "0,0,0,0,0,0,1"))
         (rule "polySimp_elimOne" (formula "9") (term "0,0,0,0,0,0,1"))
         (rule "inEqSimp_sepNegMonomial0" (formula "9") (term "1,0,0,1"))
         (rule "polySimp_mulLiterals" (formula "9") (term "0,1,0,0,1"))
         (rule "polySimp_elimOne" (formula "9") (term "0,1,0,0,1"))
         (rule "nnf_ex2all" (formula "10"))
         (rule "nnf_notAnd" (formula "1") (term "0"))
         (rule "nnf_notAnd" (formula "1") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
         (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
         (rule "mul_literals" (formula "1") (term "1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
         (rule "commute_or_2" (formula "1") (term "0"))
         (rule "commute_or" (formula "1") (term "0,0"))
         (rule "ifthenelse_split" (formula "3") (term "0"))
         (branch "f_s.length >= 1 TRUE"
            (rule "replace_known_left" (formula "1") (term "0,1,1,0") (ifseqformula "3"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "3")) (ifInst ""  (formula "3")) (ifInst ""  (formula "7")) (ifInst ""  (formula "10")))
            (rule "replace_known_left" (formula "11") (term "0,0,1,0,0,1") (ifseqformula "3"))
             (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "3")) (ifInst ""  (formula "3")) (ifInst ""  (formula "10")) (ifInst ""  (formula "7")) (ifInst ""  (formula "10")))
            (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "3"))
            (rule "leq_literals" (formula "9") (term "0"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "true_left" (formula "9"))
            (rule "equalityToSeqGetAndSeqLenLeft" (formula "5") (inst "iv=iv"))
            (rule "andLeft" (formula "5"))
            (rule "lenOfSwap" (formula "5") (term "0"))
            (rule "eqSymm" (formula "5"))
            (rule "lenOfSwap" (formula "6") (term "1,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0"))
            (rule "applyEqRigid" (formula "6") (term "0,0,1,0") (ifseqformula "7"))
             (builtin "One Step Simplification" (formula "6"))
            (rule "true_left" (formula "6"))
            (rule "ifthenelse_to_or_left2" (formula "1") (term "0,0,0"))
            (rule "eqSymm" (formula "1") (term "0,1,0,0,0,0"))
            (rule "commute_or" (formula "1") (term "0,0"))
            (rule "commute_or_2" (formula "1") (term "0"))
            (rule "commute_or" (formula "1") (term "1,1,0"))
            (rule "cnf_rightDist" (formula "1") (term "0"))
            (rule "distr_forallAnd" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "shift_paren_or" (formula "1") (term "0"))
            (rule "commute_or_2" (formula "1") (term "0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "inEqSimp_commuteGeq" (formula "1") (term "1,0"))
            (rule "inEqSimp_contradInEq1" (formula "1") (term "1,0") (ifseqformula "9"))
            (rule "inEqSimp_homoInEq1" (formula "1") (term "0,1,0"))
            (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,1,0"))
            (rule "add_literals" (formula "1") (term "1,1,0,0,1,0"))
            (rule "times_zero_1" (formula "1") (term "1,0,0,1,0"))
            (rule "add_zero_right" (formula "1") (term "0,0,1,0"))
            (rule "leq_literals" (formula "1") (term "0,1,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "8"))
            (rule "qeq_literals" (formula "1") (term "0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "notLeft" (formula "1"))
            (rule "shift_paren_or" (formula "1") (term "0"))
            (rule "commute_or_2" (formula "1") (term "0,0"))
            (rule "ifthenelse_to_or_left2" (formula "1") (term "0,0,0,0"))
            (rule "eqSymm" (formula "1") (term "0,1,0,0,0,0,0"))
            (rule "commute_or" (formula "1") (term "0,0,0"))
            (rule "commute_or_2" (formula "1") (term "0,0"))
            (rule "commute_or_2" (formula "1") (term "0"))
            (rule "commute_or" (formula "1") (term "1,1,0"))
            (rule "cnf_rightDist" (formula "1") (term "0"))
            (rule "distr_forallAnd" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "shift_paren_or" (formula "2") (term "0"))
            (rule "commute_or" (formula "1") (term "1,0"))
            (rule "commute_or_2" (formula "2") (term "0,0"))
            (rule "shift_paren_or" (formula "1") (term "0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "inEqSimp_commuteGeq" (formula "1") (term "1,0"))
            (rule "inEqSimp_contradInEq1" (formula "1") (term "0,0,0") (ifseqformula "10"))
            (rule "qeq_literals" (formula "1") (term "0,0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "inEqSimp_contradInEq1" (formula "1") (term "1,0") (ifseqformula "11"))
            (rule "inEqSimp_homoInEq1" (formula "1") (term "0,1,0"))
            (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,1,0"))
            (rule "add_literals" (formula "1") (term "1,1,0,0,1,0"))
            (rule "times_zero_1" (formula "1") (term "1,0,0,1,0"))
            (rule "add_zero_right" (formula "1") (term "0,0,1,0"))
            (rule "leq_literals" (formula "1") (term "0,1,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "shift_paren_or" (formula "2") (term "0,0,0"))
            (rule "ifthenelse_to_or_left2" (formula "2") (term "0,0,0,0,0"))
            (rule "nnf_notAnd" (formula "2") (term "0,0,0,0,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "2") (term "1,0,0,0,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,0,0,0,0,0,0,0"))
            (rule "mul_literals" (formula "2") (term "0,1,0,0,1,0,0,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0,0,0,0,0,0,0"))
            (rule "add_literals" (formula "2") (term "0,0,0,1,0,0,0,0,0,0,0"))
            (rule "add_zero_left" (formula "2") (term "0,0,1,0,0,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "1,0,0,0,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0,0,0,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "2") (term "1,1,0,0,0,0,0,0,0"))
            (rule "inEqSimp_notGeq" (formula "2") (term "0,0,0,0,0,0,0,0"))
            (rule "mul_literals" (formula "2") (term "1,0,0,0,0,0,0,0,0,0,0"))
            (rule "add_zero_right" (formula "2") (term "0,0,0,0,0,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "0,0,0,0,0,0,0,0"))
            (rule "mul_literals" (formula "2") (term "1,0,0,0,0,0,0,0,0"))
            (rule "commute_or" (formula "2") (term "0,0,0,0"))
            (rule "commute_or_2" (formula "2") (term "0,0,0"))
            (rule "commute_or_2" (formula "2") (term "0,0"))
            (rule "commute_or_2" (formula "2") (term "0"))
            (rule "commute_or_2" (formula "2") (term "0,1,0"))
            (rule "commute_or" (formula "2") (term "1,1,0"))
            (rule "applyEq_or_int2" (formula "2") (term "0,0,1,0"))
            (rule "inEqSimp_contradInEq1" (formula "2") (term "0,0,0,1,0") (ifseqformula "3"))
            (rule "qeq_literals" (formula "2") (term "0,0,0,0,1,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "applyEq_or_int4" (formula "2") (term "0,1,0"))
            (rule "inEqSimp_commuteGeq" (formula "2") (term "1,0,1,0"))
            (rule "inEqSimp_contradInEq1" (formula "2") (term "1,0,1,0") (ifseqformula "5"))
            (rule "inEqSimp_homoInEq1" (formula "2") (term "0,1,0,1,0"))
            (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0,1,0,1,0"))
            (rule "add_literals" (formula "2") (term "1,1,0,0,1,0,1,0"))
            (rule "times_zero_1" (formula "2") (term "1,0,0,1,0,1,0"))
            (rule "add_zero_right" (formula "2") (term "0,0,1,0,1,0"))
            (rule "leq_literals" (formula "2") (term "0,1,0,1,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "cnf_rightDist" (formula "2") (term "1,1,0"))
            (rule "cnf_rightDist" (formula "2") (term "0"))
            (rule "distr_forallAnd" (formula "2"))
             (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "12")))
            (rule "andLeft" (formula "2"))
            (rule "inEqSimp_commuteGeq" (formula "2") (term "1"))
            (rule "inEqSimp_contradInEq1" (formula "2") (term "1") (ifseqformula "6"))
            (rule "inEqSimp_homoInEq1" (formula "2") (term "0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0,1"))
            (rule "add_literals" (formula "2") (term "1,1,0,0,1"))
            (rule "times_zero_1" (formula "2") (term "1,0,0,1"))
            (rule "add_zero_right" (formula "2") (term "0,0,1"))
            (rule "leq_literals" (formula "2") (term "0,1"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "inEqSimp_contradInEq1" (formula "2") (term "0") (ifseqformula "4"))
            (rule "qeq_literals" (formula "2") (term "0,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "replace_known_left" (formula "1") (term "0,1") (ifseqformula "2"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "replace_known_left" (formula "14") (term "0,0") (ifseqformula "1"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "eqSymm" (formula "14"))
            (rule "applyEqRigid" (formula "4") (term "0") (ifseqformula "2"))
            (rule "applyEq" (formula "10") (term "0") (ifseqformula "1"))
            (rule "applyEq" (formula "5") (term "1,1") (ifseqformula "2"))
            (rule "applyEqRigid" (formula "6") (term "2,0") (ifseqformula "1"))
            (rule "applyEq" (formula "9") (term "1,1") (ifseqformula "1"))
            (rule "applyEq" (formula "9") (term "0") (ifseqformula "2"))
            (rule "eqSymm" (formula "9"))
            (rule "close" (formula "9") (ifseqformula "1"))
         )
         (branch "f_s.length >= 1 FALSE"
            (rule "replace_known_right" (formula "1") (term "0,0,1,0,0,0,0,0,0") (ifseqformula "10"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "10")) (ifInst ""  (formula "10")))
            (rule "replace_known_right" (formula "11") (term "0,0,0,0,0,1") (ifseqformula "10"))
             (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "10")) (ifInst ""  (formula "10")))
            (rule "inEqSimp_geqRight" (formula "10"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "add_zero_left" (formula "1") (term "0"))
            (rule "inEqSimp_homoInEq1" (formula "4"))
            (rule "times_zero_2" (formula "4") (term "1,0"))
            (rule "add_zero_right" (formula "4") (term "0"))
            (rule "inEqSimp_homoInEq1" (formula "2") (term "0,0,0,0,0,0,0"))
            (rule "times_zero_2" (formula "2") (term "1,0,0,0,0,0,0,0,0"))
            (rule "add_zero_right" (formula "2") (term "0,0,0,0,0,0,0,0"))
            (rule "inEqSimp_homoInEq1" (formula "2") (term "1,0,0,0,0,0,0"))
            (rule "times_zero_2" (formula "2") (term "1,0,1,0,0,0,0,0,0"))
            (rule "add_zero_right" (formula "2") (term "0,1,0,0,0,0,0,0"))
            (rule "inEqSimp_homoInEq1" (formula "11") (term "0"))
            (rule "times_zero_2" (formula "11") (term "1,0,0"))
            (rule "add_zero_right" (formula "11") (term "0,0"))
            (rule "inEqSimp_homoInEq1" (formula "11") (term "0,0,0,1"))
            (rule "times_zero_2" (formula "11") (term "1,0,0,0,0,1"))
            (rule "add_zero_right" (formula "11") (term "0,0,0,0,1"))
            (rule "inEqSimp_homoInEq1" (formula "11") (term "1,0,0,1"))
            (rule "times_zero_2" (formula "11") (term "1,0,1,0,0,1"))
            (rule "add_zero_right" (formula "11") (term "0,1,0,0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "4"))
            (rule "mul_literals" (formula "4") (term "1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "0,0,0,0,0,0,0"))
            (rule "mul_literals" (formula "2") (term "1,0,0,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0,0,0,0,0"))
            (rule "mul_literals" (formula "2") (term "1,1,0,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0"))
            (rule "mul_literals" (formula "11") (term "1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,1"))
            (rule "mul_literals" (formula "11") (term "1,0,0,0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,1"))
            (rule "mul_literals" (formula "11") (term "1,1,0,0,1"))
            (rule "inEqSimp_contradInEq1" (formula "4") (ifseqformula "3"))
            (rule "qeq_literals" (formula "4") (term "0"))
             (builtin "One Step Simplification" (formula "4"))
            (rule "closeFalse" (formula "4"))
         )
      )
   )
   (branch "Case 2"
      (rule "allRight" (formula "7") (inst "sk=iv_0") (userinteraction))
      (rule "impRight" (formula "7") (userinteraction))
      (rule "getOfSwap" (formula "8") (term "1,1") (userinteraction))
      (rule "ifthenelse_split" (formula "8") (term "1,1") (userinteraction))
      (branch "!( 0 <= f_x & 0 <= f_y & f_x < seqDef{int i;}(0, f_s.length, i).length & f_y < seqDef{int i;}(0, f_s.length, i).length) TRUE"
         (rule "andLeft" (formula "2"))
         (rule "notLeft" (formula "1"))
         (rule "eqSymm" (formula "10"))
         (rule "lenOfSwap" (formula "2") (term "1"))
         (rule "lenOfSeqDef" (formula "9") (term "1,1,0"))
         (rule "polySimp_elimSub" (formula "9") (term "1,1,1,0"))
         (rule "times_zero_2" (formula "9") (term "1,1,1,1,0"))
         (rule "add_zero_right" (formula "9") (term "1,1,1,0"))
         (rule "lenOfSeqDef" (formula "9") (term "1,1"))
         (rule "polySimp_elimSub" (formula "9") (term "1,1,1"))
         (rule "times_zero_2" (formula "9") (term "1,1,1,1"))
         (rule "add_zero_right" (formula "9") (term "1,1,1"))
         (rule "getOfSeqDef" (formula "10") (term "1,0"))
         (rule "castDel" (formula "10") (term "1,1,0"))
         (rule "add_zero_right" (formula "10") (term "1,1,0"))
         (rule "replace_known_left" (formula "10") (term "0,0,1,0") (ifseqformula "1"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "polySimp_elimSub" (formula "10") (term "1,0,1,0"))
         (rule "times_zero_2" (formula "10") (term "1,1,0,1,0"))
         (rule "add_zero_right" (formula "10") (term "1,0,1,0"))
         (rule "lenOfSeqDef" (formula "2") (term "1"))
         (rule "polySimp_elimSub" (formula "2") (term "1,1"))
         (rule "mul_literals" (formula "2") (term "1,1,1"))
         (rule "add_zero_right" (formula "2") (term "1,1"))
         (rule "inEqSimp_ltToLeq" (formula "9") (term "0,1,1,0"))
         (rule "add_zero_right" (formula "9") (term "0,0,1,1,0"))
         (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "9") (term "0,1,1"))
         (rule "add_zero_right" (formula "9") (term "0,0,1,1"))
         (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "10") (term "0,1,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,1,0"))
         (rule "polySimp_addComm1" (formula "10") (term "0,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "2") (term "0,1"))
         (rule "add_zero_right" (formula "2") (term "0,0,1"))
         (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1"))
         (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0"))
         (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0"))
         (rule "polySimp_addComm1" (formula "9") (term "0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "9") (term "1"))
         (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1"))
         (rule "polySimp_addComm1" (formula "9") (term "0,1"))
         (rule "inEqSimp_ltToLeq" (formula "2"))
         (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "2") (term "0"))
         (rule "inEqSimp_commuteLeq" (formula "1"))
         (rule "inEqSimp_commuteLeq" (formula "9") (term "1,0,0"))
         (rule "replace_known_left" (formula "9") (term "1,0,0") (ifseqformula "6"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0"))
         (rule "replace_known_left" (formula "9") (term "0,0") (ifseqformula "4"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "0,1,0"))
         (rule "polySimp_mulLiterals" (formula "10") (term "0,0,1,0"))
         (rule "polySimp_elimOne" (formula "10") (term "0,0,1,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "2"))
         (rule "polySimp_mulLiterals" (formula "2") (term "0"))
         (rule "polySimp_elimOne" (formula "2") (term "0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "9") (term "0,0,1,0,1"))
         (rule "polySimp_mulLiterals" (formula "9") (term "0,0,0,1,0,1"))
         (rule "polySimp_elimOne" (formula "9") (term "0,0,0,1,0,1"))
         (rule "inEqSimp_sepNegMonomial0" (formula "9") (term "0,0,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "9") (term "0,0,0,1,0,0"))
         (rule "polySimp_elimOne" (formula "9") (term "0,0,0,1,0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0"))
         (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0"))
         (rule "polySimp_elimOne" (formula "2") (term "0,0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "9") (term "1"))
         (rule "polySimp_mulLiterals" (formula "9") (term "0,1"))
         (rule "polySimp_elimOne" (formula "9") (term "0,1"))
         (rule "inEqSimp_sepNegMonomial0" (formula "9") (term "0"))
         (rule "polySimp_mulLiterals" (formula "9") (term "0,0"))
         (rule "polySimp_elimOne" (formula "9") (term "0,0"))
         (rule "ifthenelse_split" (formula "2") (term "0"))
         (branch "f_s.length >= 1 TRUE"
            (rule "replace_known_left" (formula "11") (term "0,1,0") (ifseqformula "3"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "replace_known_left" (formula "10") (term "0,0,0") (ifseqformula "2"))
             (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "2")) (ifInst ""  (formula "6")) (ifInst ""  (formula "9")))
            (rule "closeTrue" (formula "10"))
         )
         (branch "f_s.length >= 1 FALSE"
            (rule "replace_known_right" (formula "10") (term "0,0,0") (ifseqformula "9"))
             (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "9")))
            (rule "inEqSimp_geqRight" (formula "9"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "add_zero_left" (formula "1") (term "0"))
            (rule "inEqSimp_homoInEq1" (formula "3"))
            (rule "times_zero_2" (formula "3") (term "1,0"))
            (rule "add_zero_right" (formula "3") (term "0"))
            (rule "inEqSimp_homoInEq1" (formula "10") (term "0"))
            (rule "times_zero_2" (formula "10") (term "1,0,0"))
            (rule "add_zero_right" (formula "10") (term "0,0"))
            (rule "inEqSimp_homoInEq1" (formula "10") (term "1"))
            (rule "times_zero_2" (formula "10") (term "1,0,1"))
            (rule "add_zero_right" (formula "10") (term "0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "3"))
            (rule "mul_literals" (formula "3") (term "1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0"))
            (rule "mul_literals" (formula "10") (term "1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1"))
            (rule "mul_literals" (formula "10") (term "1,1"))
            (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "3"))
            (rule "qeq_literals" (formula "2") (term "0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "closeFalse" (formula "2"))
         )
      )
      (branch "!( 0 <= f_x & 0 <= f_y & f_x < seqDef{int i;}(0, f_s.length, i).length & f_y < seqDef{int i;}(0, f_s.length, i).length) FALSE"
         (rule "ifthenelse_split" (formula "9") (term "1,1") (userinteraction))
         (branch "iv_0 = f_x TRUE"
            (rule "applyEqReverse" (formula "10") (term "0,1") (ifseqformula "3") (userinteraction))
            (rule "getOfSwap" (formula "10") (term "1") (userinteraction))
            (rule "ifthenelse_split" (formula "10") (term "1") (userinteraction))
            (branch "!( 0 <= f_x & 0 <= f_y & f_x < f_s.length & f_y < f_s.length) TRUE"
               (rule "notRight" (formula "10"))
               (rule "andLeft" (formula "4"))
               (rule "notLeft" (formula "2"))
               (rule "andLeft" (formula "1"))
               (rule "andLeft" (formula "1"))
               (rule "andLeft" (formula "1"))
               (rule "eqSymm" (formula "15"))
               (rule "replace_known_left" (formula "14") (term "1,0,0") (ifseqformula "2"))
                (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "1")))
               (rule "lenOfSwap" (formula "7") (term "1"))
               (rule "lenOfSeqDef" (formula "4") (term "1"))
               (rule "polySimp_elimSub" (formula "4") (term "1,1"))
               (rule "mul_literals" (formula "4") (term "1,1,1"))
               (rule "add_zero_right" (formula "4") (term "1,1"))
               (rule "lenOfSeqDef" (formula "3") (term "1"))
               (rule "polySimp_elimSub" (formula "3") (term "1,1"))
               (rule "mul_literals" (formula "3") (term "1,1,1"))
               (rule "add_zero_right" (formula "3") (term "1,1"))
               (rule "getOfSeqDef" (formula "15") (term "1,0"))
               (rule "castDel" (formula "15") (term "1,1,0"))
               (rule "add_zero_right" (formula "15") (term "1,1,0"))
               (rule "replace_known_left" (formula "15") (term "0,0,1,0") (ifseqformula "2"))
                (builtin "One Step Simplification" (formula "15"))
               (rule "polySimp_elimSub" (formula "15") (term "1,0,1,0"))
               (rule "times_zero_2" (formula "15") (term "1,1,0,1,0"))
               (rule "add_zero_right" (formula "15") (term "1,0,1,0"))
               (rule "lenOfSeqDef" (formula "7") (term "1"))
               (rule "polySimp_elimSub" (formula "7") (term "1,1"))
               (rule "times_zero_2" (formula "7") (term "1,1,1"))
               (rule "add_zero_right" (formula "7") (term "1,1"))
               (rule "inEqSimp_ltToLeq" (formula "14") (term "1"))
               (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1"))
               (rule "polySimp_addComm1" (formula "14") (term "0,1"))
               (rule "inEqSimp_ltToLeq" (formula "14") (term "0"))
               (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0"))
               (rule "polySimp_addComm1" (formula "14") (term "0,0"))
               (rule "inEqSimp_ltToLeq" (formula "4") (term "0,1"))
               (rule "add_zero_right" (formula "4") (term "0,0,1"))
               (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1"))
               (rule "inEqSimp_ltToLeq" (formula "3") (term "0,1"))
               (rule "add_zero_right" (formula "3") (term "0,0,1"))
               (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1"))
               (rule "inEqSimp_ltToLeq" (formula "15") (term "0,1,0"))
               (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,1,0"))
               (rule "polySimp_addComm1" (formula "15") (term "0,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "7") (term "0,1"))
               (rule "add_zero_right" (formula "7") (term "0,0,1"))
               (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1"))
               (rule "inEqSimp_ltToLeq" (formula "4"))
               (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "4") (term "0"))
               (rule "inEqSimp_ltToLeq" (formula "3"))
               (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "3") (term "0"))
               (rule "inEqSimp_commuteLeq" (formula "6"))
               (rule "inEqSimp_commuteLeq" (formula "2"))
               (rule "inEqSimp_commuteLeq" (formula "1"))
               (rule "inEqSimp_ltToLeq" (formula "5"))
               (rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "5") (term "0"))
               (rule "applyEqRigid" (formula "4") (term "0") (ifseqformula "3"))
               (rule "applyEqRigid" (formula "12") (term "1,1") (ifseqformula "3"))
               (rule "applyEq" (formula "4") (term "1,0,0") (ifseqformula "3"))
               (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "1"))
               (rule "polySimp_mulLiterals" (formula "10") (term "0,1"))
               (rule "polySimp_elimOne" (formula "10") (term "0,1"))
               (rule "replace_known_left" (formula "10") (term "1") (ifseqformula "9"))
                (builtin "One Step Simplification" (formula "10"))
               (rule "inEqSimp_leqRight" (formula "10"))
               (rule "times_zero_1" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0"))
               (rule "add_zero_left" (formula "1") (term "0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0,1,0"))
               (rule "polySimp_mulLiterals" (formula "11") (term "0,0,1,0"))
               (rule "polySimp_elimOne" (formula "11") (term "0,0,1,0"))
               (rule "replace_known_left" (formula "11") (term "0,1,0") (ifseqformula "10"))
                (builtin "One Step Simplification" (formula "11"))
               (rule "inEqSimp_sepNegMonomial0" (formula "3") (term "0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "3") (term "0,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "3") (term "0,0,0,1,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "2") (term "0,0,0,1,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0"))
               (rule "polySimp_elimOne" (formula "1") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "3"))
               (rule "polySimp_mulLiterals" (formula "3") (term "0"))
               (rule "polySimp_elimOne" (formula "3") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "2"))
               (rule "polySimp_mulLiterals" (formula "2") (term "0"))
               (rule "polySimp_elimOne" (formula "2") (term "0"))
               (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "7"))
               (rule "andLeft" (formula "1"))
               (rule "inEqSimp_homoInEq1" (formula "1"))
               (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
               (rule "add_literals" (formula "1") (term "1,1,0"))
               (rule "times_zero_1" (formula "1") (term "1,0"))
               (rule "add_zero_right" (formula "1") (term "0"))
               (rule "leq_literals" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
            (branch "!( 0 <= f_x & 0 <= f_y & f_x < f_s.length & f_y < f_s.length) FALSE"
               (rule "ifthenelse_split" (formula "11") (term "1") (userinteraction))
               (branch "(int)seqDef{int i;}(0, f_s.length, i)[f_y] = f_x TRUE"
                  (rule "notRight" (formula "11"))
                  (rule "andLeft" (formula "4"))
                  (rule "notRight" (formula "12"))
                  (rule "andLeft" (formula "2"))
                  (rule "andLeft" (formula "1"))
                  (rule "andLeft" (formula "3"))
                  (rule "andLeft" (formula "1"))
                  (rule "andLeft" (formula "3"))
                  (rule "getOfSeqDef" (formula "7") (term "0"))
                  (rule "castDel" (formula "7") (term "1,0"))
                  (rule "add_zero_right" (formula "7") (term "1,0"))
                  (rule "replace_known_left" (formula "7") (term "0,0,0") (ifseqformula "4"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "polySimp_elimSub" (formula "7") (term "1,0,0"))
                  (rule "times_zero_2" (formula "7") (term "1,1,0,0"))
                  (rule "add_zero_right" (formula "7") (term "1,0,0"))
                  (rule "replace_known_left" (formula "7") (term "0,0") (ifseqformula "6"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "lenOfSwap" (formula "10") (term "1"))
                  (rule "lenOfSeqDef" (formula "2") (term "1"))
                  (rule "polySimp_elimSub" (formula "2") (term "1,1"))
                  (rule "times_zero_2" (formula "2") (term "1,1,1"))
                  (rule "add_zero_right" (formula "2") (term "1,1"))
                  (rule "lenOfSeqDef" (formula "1") (term "1"))
                  (rule "polySimp_elimSub" (formula "1") (term "1,1"))
                  (rule "times_zero_2" (formula "1") (term "1,1,1"))
                  (rule "add_zero_right" (formula "1") (term "1,1"))
                  (rule "lenOfSeqDef" (formula "10") (term "1"))
                  (rule "polySimp_elimSub" (formula "10") (term "1,1"))
                  (rule "times_zero_2" (formula "10") (term "1,1,1"))
                  (rule "add_zero_right" (formula "10") (term "1,1"))
                  (rule "inEqSimp_ltToLeq" (formula "6"))
                  (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "6") (term "0"))
                  (rule "inEqSimp_ltToLeq" (formula "5"))
                  (rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "5") (term "0"))
                  (rule "inEqSimp_ltToLeq" (formula "2") (term "0,1"))
                  (rule "add_zero_right" (formula "2") (term "0,0,1"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "1") (term "0,1"))
                  (rule "add_zero_right" (formula "1") (term "0,0,1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "10") (term "0,1"))
                  (rule "add_zero_right" (formula "10") (term "0,0,1"))
                  (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "2"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "2") (term "0"))
                  (rule "inEqSimp_commuteLeq" (formula "9"))
                  (rule "inEqSimp_ltToLeq" (formula "1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                  (rule "inEqSimp_ltToLeq" (formula "10"))
                  (rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "10") (term "0"))
                  (rule "inEqSimp_commuteLeq" (formula "4"))
                  (rule "inEqSimp_commuteLeq" (formula "3"))
                  (rule "applyEqRigid" (formula "7") (term "0") (ifseqformula "6"))
                  (rule "applyEq" (formula "13") (term "1,1") (ifseqformula "5"))
                  (rule "applyEq" (formula "13") (term "1,0") (ifseqformula "6"))
                  (rule "eqSymm" (formula "13"))
                  (rule "applyEq" (formula "11") (term "0") (ifseqformula "5"))
                  (rule "applyEq" (formula "8") (term "2,0") (ifseqformula "5"))
                  (rule "applyEq" (formula "2") (term "1,0,0") (ifseqformula "5"))
                  (rule "applyEqRigid" (formula "3") (term "1,0,0") (ifseqformula "4"))
                  (rule "applyEq" (formula "10") (term "1,0") (ifseqformula "3"))
                   (builtin "One Step Simplification" (formula "10"))
                  (rule "closeTrue" (formula "10"))
               )
               (branch "(int)seqDef{int i;}(0, f_s.length, i)[f_y] = f_x FALSE"
                  (rule "notRight" (formula "10"))
                  (rule "andLeft" (formula "3"))
                  (rule "notRight" (formula "11"))
                  (rule "andLeft" (formula "2"))
                  (rule "andLeft" (formula "1"))
                  (rule "andLeft" (formula "3"))
                  (rule "andLeft" (formula "1"))
                  (rule "andLeft" (formula "3"))
                  (rule "eqSymm" (formula "17"))
                  (rule "getOfSeqDef" (formula "16") (term "0"))
                  (rule "castDel" (formula "16") (term "1,0"))
                  (rule "add_zero_right" (formula "16") (term "1,0"))
                  (rule "replace_known_left" (formula "16") (term "0,0,0") (ifseqformula "4"))
                   (builtin "One Step Simplification" (formula "16"))
                  (rule "polySimp_elimSub" (formula "16") (term "1,0,0"))
                  (rule "times_zero_2" (formula "16") (term "1,1,0,0"))
                  (rule "add_zero_right" (formula "16") (term "1,0,0"))
                  (rule "replace_known_left" (formula "16") (term "0,0") (ifseqformula "6"))
                   (builtin "One Step Simplification" (formula "16"))
                  (rule "lenOfSwap" (formula "9") (term "1"))
                  (rule "lenOfSeqDef" (formula "2") (term "1"))
                  (rule "polySimp_elimSub" (formula "2") (term "1,1"))
                  (rule "times_zero_2" (formula "2") (term "1,1,1"))
                  (rule "add_zero_right" (formula "2") (term "1,1"))
                  (rule "lenOfSeqDef" (formula "1") (term "1"))
                  (rule "polySimp_elimSub" (formula "1") (term "1,1"))
                  (rule "mul_literals" (formula "1") (term "1,1,1"))
                  (rule "add_zero_right" (formula "1") (term "1,1"))
                  (rule "getOfSeqDef" (formula "17") (term "0,0,0"))
                  (rule "castDel" (formula "17") (term "1,0,0,0"))
                  (rule "add_zero_right" (formula "17") (term "1,0,0,0"))
                   (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "4")))
                  (rule "polySimp_elimSub" (formula "17") (term "1,0,0,0"))
                  (rule "times_zero_2" (formula "17") (term "1,1,0,0,0"))
                  (rule "add_zero_right" (formula "17") (term "1,0,0,0"))
                  (rule "replace_known_left" (formula "17") (term "0,0,0") (ifseqformula "6"))
                   (builtin "One Step Simplification" (formula "17"))
                  (rule "eqSymm" (formula "17"))
                  (rule "lenOfSeqDef" (formula "9") (term "1"))
                  (rule "polySimp_elimSub" (formula "9") (term "1,1"))
                  (rule "mul_literals" (formula "9") (term "1,1,1"))
                  (rule "add_zero_right" (formula "9") (term "1,1"))
                  (rule "inEqSimp_ltToLeq" (formula "6"))
                  (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "6") (term "0"))
                  (rule "inEqSimp_ltToLeq" (formula "5"))
                  (rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "5") (term "0"))
                  (rule "inEqSimp_ltToLeq" (formula "2") (term "0,1"))
                  (rule "add_zero_right" (formula "2") (term "0,0,1"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "1") (term "0,1"))
                  (rule "add_zero_right" (formula "1") (term "0,0,1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "9") (term "0,1"))
                  (rule "add_zero_right" (formula "9") (term "0,0,1"))
                  (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "8"))
                  (rule "inEqSimp_commuteLeq" (formula "3"))
                  (rule "inEqSimp_commuteLeq" (formula "3"))
                  (rule "inEqSimp_ltToLeq" (formula "2"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "2") (term "0"))
                  (rule "inEqSimp_ltToLeq" (formula "1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                  (rule "inEqSimp_ltToLeq" (formula "7"))
                  (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "7") (term "0"))
                  (rule "applyEq" (formula "6") (term "0") (ifseqformula "5"))
                  (rule "applyEqRigid" (formula "14") (term "1,0") (ifseqformula "5"))
                   (builtin "One Step Simplification" (formula "14"))
                  (rule "closeTrue" (formula "14"))
               )
            )
         )
         (branch "iv_0 = f_x FALSE"
            (rule "ifthenelse_split" (formula "10") (term "1,1") (userinteraction))
            (branch "iv_0 = f_y TRUE"
               (rule "applyEqReverse" (formula "11") (term "0,1") (ifseqformula "3") (userinteraction))
               (rule "getOfSwap" (formula "11") (term "1") (userinteraction))
               (rule "notRight" (formula "9"))
               (rule "andLeft" (formula "3"))
               (rule "andLeft" (formula "1"))
               (rule "andLeft" (formula "1"))
               (rule "andLeft" (formula "1"))
               (rule "eqSymm" (formula "15"))
               (rule "replace_known_left" (formula "15") (term "1,0,0,0,0,0") (ifseqformula "2"))
                (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "1")))
               (rule "lenOfSwap" (formula "7") (term "1"))
               (rule "lenOfSeqDef" (formula "4") (term "1"))
               (rule "polySimp_elimSub" (formula "4") (term "1,1"))
               (rule "times_zero_2" (formula "4") (term "1,1,1"))
               (rule "add_zero_right" (formula "4") (term "1,1"))
               (rule "lenOfSeqDef" (formula "3") (term "1"))
               (rule "polySimp_elimSub" (formula "3") (term "1,1"))
               (rule "times_zero_2" (formula "3") (term "1,1,1"))
               (rule "add_zero_right" (formula "3") (term "1,1"))
               (rule "getOfSeqDef" (formula "15") (term "0,0,2,0"))
               (rule "castDel" (formula "15") (term "1,0,0,2,0"))
               (rule "add_zero_right" (formula "15") (term "1,0,0,2,0"))
                (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "1")))
               (rule "polySimp_elimSub" (formula "15") (term "1,0,0,2,0"))
               (rule "times_zero_2" (formula "15") (term "1,1,0,0,2,0"))
               (rule "add_zero_right" (formula "15") (term "1,0,0,2,0"))
               (rule "lenOfSeqDef" (formula "7") (term "1"))
               (rule "polySimp_elimSub" (formula "7") (term "1,1"))
               (rule "times_zero_2" (formula "7") (term "1,1,1"))
               (rule "add_zero_right" (formula "7") (term "1,1"))
               (rule "getOfSeqDef" (formula "15") (term "1,1,0"))
               (rule "castDel" (formula "15") (term "1,1,1,0"))
               (rule "add_zero_right" (formula "15") (term "1,1,1,0"))
               (rule "replace_known_left" (formula "15") (term "0,0,1,1,0") (ifseqformula "1"))
                (builtin "One Step Simplification" (formula "15"))
               (rule "polySimp_elimSub" (formula "15") (term "1,0,1,1,0"))
               (rule "times_zero_2" (formula "15") (term "1,1,0,1,1,0"))
               (rule "add_zero_right" (formula "15") (term "1,0,1,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "4") (term "0,1"))
               (rule "add_zero_right" (formula "4") (term "0,0,1"))
               (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1"))
               (rule "getOfSeqDef" (formula "15") (term "1,2,2,2,0"))
               (rule "castDel" (formula "15") (term "1,1,2,2,2,0"))
               (rule "add_zero_right" (formula "15") (term "1,1,2,2,2,0"))
               (rule "replace_known_left" (formula "15") (term "0,0,1,2,2,2,0") (ifseqformula "1"))
                (builtin "One Step Simplification" (formula "15"))
               (rule "polySimp_elimSub" (formula "15") (term "1,0,1,2,2,2,0"))
               (rule "mul_literals" (formula "15") (term "1,1,0,1,2,2,2,0"))
               (rule "add_zero_right" (formula "15") (term "1,0,1,2,2,2,0"))
               (rule "inEqSimp_ltToLeq" (formula "3") (term "0,1"))
               (rule "add_zero_right" (formula "3") (term "0,0,1"))
               (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1"))
               (rule "getOfSeqDef" (formula "15") (term "0,0,2,2,0"))
               (rule "castDel" (formula "15") (term "1,0,0,2,2,0"))
               (rule "add_zero_right" (formula "15") (term "1,0,0,2,2,0"))
               (rule "replace_known_left" (formula "15") (term "0,0,0,0,2,2,0") (ifseqformula "1"))
                (builtin "One Step Simplification" (formula "15"))
               (rule "polySimp_elimSub" (formula "15") (term "1,0,0,0,2,2,0"))
               (rule "mul_literals" (formula "15") (term "1,1,0,0,0,2,2,0"))
               (rule "add_zero_right" (formula "15") (term "1,0,0,0,2,2,0"))
               (rule "inEqSimp_ltToLeq" (formula "7") (term "0,1"))
               (rule "add_zero_right" (formula "7") (term "0,0,1"))
               (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1"))
               (rule "ifthenelse_negated" (formula "15") (term "0"))
               (rule "inEqSimp_ltToLeq" (formula "4"))
               (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "4") (term "0"))
               (rule "inEqSimp_commuteLeq" (formula "6"))
               (rule "inEqSimp_commuteLeq" (formula "2"))
               (rule "inEqSimp_commuteLeq" (formula "1"))
               (rule "inEqSimp_ltToLeq" (formula "1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "1") (term "0"))
               (rule "inEqSimp_ltToLeq" (formula "5"))
               (rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "5") (term "0"))
               (rule "inEqSimp_ltToLeq" (formula "13") (term "0,1,2,0"))
               (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,1,2,0"))
               (rule "polySimp_addComm1" (formula "13") (term "0,0,1,2,0"))
               (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0,2,1,0"))
               (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0,2,1,0"))
               (rule "polySimp_addComm1" (formula "13") (term "0,0,0,0,2,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "13") (term "0,1,2,2,1,0"))
               (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,1,2,2,1,0"))
               (rule "polySimp_addComm1" (formula "13") (term "0,0,1,2,2,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
               (rule "polySimp_addComm1" (formula "13") (term "0,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,1,0"))
               (rule "polySimp_addComm1" (formula "13") (term "0,0,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0"))
               (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0"))
               (rule "polySimp_addComm1" (formula "13") (term "0,0,0,0"))
               (rule "applyEq" (formula "4") (term "0") (ifseqformula "3"))
               (rule "applyEq" (formula "11") (term "0") (ifseqformula "3"))
               (rule "applyEq" (formula "12") (term "1,1") (ifseqformula "3"))
               (rule "applyEq" (formula "4") (term "1,0,0") (ifseqformula "3"))
               (rule "inEqSimp_sepNegMonomial0" (formula "2"))
               (rule "polySimp_mulLiterals" (formula "2") (term "0"))
               (rule "polySimp_elimOne" (formula "2") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0"))
               (rule "polySimp_elimOne" (formula "1") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0,1,2,0"))
               (rule "polySimp_mulLiterals" (formula "11") (term "0,0,1,2,0"))
               (rule "polySimp_elimOne" (formula "11") (term "0,0,1,2,0"))
               (rule "replace_known_left" (formula "11") (term "0,1,2,0") (ifseqformula "6"))
                (builtin "One Step Simplification" (formula "11"))
               (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0"))
               (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0"))
               (rule "polySimp_elimOne" (formula "2") (term "0,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
               (rule "polySimp_elimOne" (formula "1") (term "0,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "11") (term "0,1,0,0"))
               (rule "polySimp_elimOne" (formula "11") (term "0,1,0,0"))
               (rule "replace_known_left" (formula "11") (term "1,0,0") (ifseqformula "9"))
                (builtin "One Step Simplification" (formula "11"))
               (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0,0"))
               (rule "polySimp_mulLiterals" (formula "11") (term "0,0,0"))
               (rule "polySimp_elimOne" (formula "11") (term "0,0,0"))
               (rule "replace_known_left" (formula "11") (term "0,0") (ifseqformula "6"))
                (builtin "One Step Simplification" (formula "11"))
               (rule "orRight" (formula "11"))
               (rule "orRight" (formula "11"))
               (rule "replace_known_right" (formula "13") (term "0,1,2,0") (ifseqformula "11"))
                (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "11")))
               (rule "inEqSimp_leqRight" (formula "11"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_zero_right" (formula "1") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0"))
               (rule "add_zero_left" (formula "1") (term "0,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0"))
               (rule "polySimp_elimOne" (formula "1") (term "0"))
               (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "7"))
               (rule "andLeft" (formula "1"))
               (rule "inEqSimp_homoInEq1" (formula "1"))
               (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
               (rule "add_literals" (formula "1") (term "1,1,0"))
               (rule "times_zero_1" (formula "1") (term "1,0"))
               (rule "add_zero_right" (formula "1") (term "0"))
               (rule "leq_literals" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
            (branch "iv_0 = f_y FALSE"
               (rule "andLeft" (formula "1"))
               (rule "notRight" (formula "9"))
               (rule "andLeft" (formula "1"))
               (rule "andLeft" (formula "1"))
               (rule "andLeft" (formula "1"))
               (rule "eqSymm" (formula "15"))
               (rule "lenOfSwap" (formula "6") (term "1"))
               (rule "lenOfSeqDef" (formula "4") (term "1"))
               (rule "polySimp_elimSub" (formula "4") (term "1,1"))
               (rule "times_zero_2" (formula "4") (term "1,1,1"))
               (rule "add_zero_right" (formula "4") (term "1,1"))
               (rule "lenOfSeqDef" (formula "3") (term "1"))
               (rule "polySimp_elimSub" (formula "3") (term "1,1"))
               (rule "times_zero_2" (formula "3") (term "1,1,1"))
               (rule "add_zero_right" (formula "3") (term "1,1"))
               (rule "getOfSeqDef" (formula "15") (term "1,0"))
               (rule "castDel" (formula "15") (term "1,1,0"))
               (rule "add_zero_right" (formula "15") (term "1,1,0"))
               (rule "replace_known_left" (formula "15") (term "0,0,1,0") (ifseqformula "5"))
                (builtin "One Step Simplification" (formula "15"))
               (rule "polySimp_elimSub" (formula "15") (term "1,0,1,0"))
               (rule "times_zero_2" (formula "15") (term "1,1,0,1,0"))
               (rule "add_zero_right" (formula "15") (term "1,0,1,0"))
               (rule "lenOfSeqDef" (formula "6") (term "1"))
               (rule "polySimp_elimSub" (formula "6") (term "1,1"))
               (rule "times_zero_2" (formula "6") (term "1,1,1"))
               (rule "add_zero_right" (formula "6") (term "1,1"))
               (rule "inEqSimp_ltToLeq" (formula "4") (term "0,1"))
               (rule "add_zero_right" (formula "4") (term "0,0,1"))
               (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1"))
               (rule "inEqSimp_ltToLeq" (formula "3") (term "0,1"))
               (rule "add_zero_right" (formula "3") (term "0,0,1"))
               (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1"))
               (rule "inEqSimp_ltToLeq" (formula "15") (term "0,1,0"))
               (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,1,0"))
               (rule "polySimp_addComm1" (formula "15") (term "0,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "6") (term "0,1"))
               (rule "add_zero_right" (formula "6") (term "0,0,1"))
               (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1"))
               (rule "inEqSimp_ltToLeq" (formula "4"))
               (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "4") (term "0"))
               (rule "inEqSimp_ltToLeq" (formula "3"))
               (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "3") (term "0"))
               (rule "inEqSimp_ltToLeq" (formula "6"))
               (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "6") (term "0"))
               (rule "inEqSimp_commuteLeq" (formula "5"))
               (rule "inEqSimp_commuteLeq" (formula "1"))
               (rule "inEqSimp_commuteLeq" (formula "1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,1,0"))
               (rule "polySimp_mulLiterals" (formula "13") (term "0,0,1,0"))
               (rule "polySimp_elimOne" (formula "13") (term "0,0,1,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "2") (term "0,0,0,1,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0"))
               (rule "polySimp_elimOne" (formula "1") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "4"))
               (rule "polySimp_mulLiterals" (formula "4") (term "0"))
               (rule "polySimp_elimOne" (formula "4") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "2"))
               (rule "polySimp_mulLiterals" (formula "2") (term "0"))
               (rule "polySimp_elimOne" (formula "2") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
               (rule "polySimp_elimOne" (formula "1") (term "0,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "4") (term "0,0"))
               (rule "polySimp_mulLiterals" (formula "4") (term "0,0,0"))
               (rule "polySimp_elimOne" (formula "4") (term "0,0,0"))
               (rule "ifthenelse_split" (formula "4") (term "0"))
               (branch "f_s.length >= 1 TRUE"
                  (rule "replace_known_left" (formula "2") (term "0,0") (ifseqformula "4"))
                   (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "11")))
                  (rule "true_left" (formula "2"))
                  (rule "replace_known_left" (formula "13") (term "0,1,0") (ifseqformula "4"))
                   (builtin "One Step Simplification" (formula "13"))
                  (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "3"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")))
                  (rule "true_left" (formula "1"))
                  (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "2"))
                  (rule "leq_literals" (formula "8") (term "0"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "true_left" (formula "8"))
                  (rule "equalityToSeqGetAndSeqLenLeft" (formula "4") (inst "iv=iv"))
                  (rule "andLeft" (formula "4"))
                  (rule "lenOfSwap" (formula "5") (term "1,1,0,0"))
                  (rule "lenOfSwap" (formula "4") (term "0"))
                  (rule "eqSymm" (formula "4"))
                  (rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0"))
                  (rule "applyEqRigid" (formula "5") (term "0,0,1,0") (ifseqformula "6"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "true_left" (formula "5"))
                  (rule "seqGetAlphaCast" (formula "12") (term "1"))
                  (rule "castDel" (formula "1") (term "0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "seqGetAlphaCast" (formula "12") (term "0"))
                  (rule "castDel" (formula "1") (term "0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "lenNonNegative" (formula "4") (term "0"))
                  (rule "inEqSimp_commuteLeq" (formula "4"))
                  (rule "applyEq" (formula "4") (term "0") (ifseqformula "5"))
                  (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "2"))
                  (rule "leq_literals" (formula "4") (term "0"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "true_left" (formula "4"))
                  (rule "applyEqReverse" (formula "12") (term "0,0") (ifseqformula "5") (userinteraction))
                  (rule "applyEqRigid" (formula "12") (term "0,0") (ifseqformula "5"))
                  (rule "applyEqReverse" (formula "12") (term "0,0") (ifseqformula "5") (userinteraction))
                  (rule "getOfSwap" (formula "12") (term "0") (userinteraction))
                   (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "10")) (ifInst ""  (formula "11")))
                  (rule "closeTrue" (formula "12"))
               )
               (branch "f_s.length >= 1 FALSE"
                  (rule "replace_known_right" (formula "2") (term "0,0") (ifseqformula "11"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "11"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "inEqSimp_geqRight" (formula "11"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "inEqSimp_homoInEq1" (formula "5"))
                  (rule "times_zero_2" (formula "5") (term "1,0"))
                  (rule "add_zero_right" (formula "5") (term "0"))
                  (rule "inEqSimp_homoInEq1" (formula "3"))
                  (rule "times_zero_2" (formula "3") (term "1,0"))
                  (rule "add_zero_right" (formula "3") (term "0"))
                  (rule "inEqSimp_homoInEq1" (formula "2"))
                  (rule "times_zero_2" (formula "2") (term "1,0"))
                  (rule "add_zero_right" (formula "2") (term "0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "5"))
                  (rule "mul_literals" (formula "5") (term "1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                  (rule "mul_literals" (formula "3") (term "1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                  (rule "mul_literals" (formula "2") (term "1"))
                  (rule "inEqSimp_contradInEq0" (formula "9") (ifseqformula "3"))
                  (rule "qeq_literals" (formula "9") (term "0"))
                   (builtin "One Step Simplification" (formula "9"))
                  (rule "closeFalse" (formula "9"))
               )
            )
         )
      )
   )
)
)
}
